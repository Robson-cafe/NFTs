{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Programa\\xE7\\xE3o\\\\NFTs\\\\nft-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Programa\\xE7\\xE3o\\\\NFTs\\\\nft-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\Programa\\xE7\\xE3o\\\\NFTs\\\\nft-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Programa\\xE7\\xE3o\\\\NFTs\\\\nft-main\\\\src\\\\components\\\\hooks\\\\metamask.js\";\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { injected } from '../wallet/connectors';\nimport { useWeb3React } from '../@web3-react/core';\nexport var MetaMaskContext = React.createContext(null);\nexport var MetaMaskProvider = function MetaMaskProvider(_ref) {\n  var children = _ref.children;\n\n  var _useWeb3React = useWeb3React(),\n      activate = _useWeb3React.activate,\n      account = _useWeb3React.account,\n      library = _useWeb3React.library,\n      connector = _useWeb3React.connector,\n      active = _useWeb3React.active,\n      deactivate = _useWeb3React.deactivate;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      shouldDisable = _useState4[0],\n      setShouldDisable = _useState4[1]; // Should disable connect button while connecting to MetaMask\n\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1]; // Init Loading\n\n\n  useEffect(function () {\n    connect().then(function (val) {\n      setIsLoading(false);\n    });\n  }, []); // Check when App is Connected or Disconnected to MetaMask\n\n  var handleIsActive = useCallback(function () {\n    console.log('App is connected with MetaMask ', active);\n    setIsActive(active);\n  }, [active]);\n  useEffect(function () {\n    handleIsActive();\n  }, [handleIsActive]); // Connect to MetaMask wallet\n\n  var connect =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('Connecting to MetaMask...');\n              setShouldDisable(true);\n              _context.prev = 2;\n              _context.next = 5;\n              return activate(injected).then(function () {\n                setShouldDisable(false);\n              });\n\n            case 5:\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](2);\n              console.log('Error on connecting: ', _context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 7]]);\n    }));\n\n    return function connect() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Disconnect from Metamask wallet\n\n\n  var disconnect =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log('Disconnecting wallet from App...');\n              _context2.prev = 1;\n              _context2.next = 4;\n              return deactivate();\n\n            case 4:\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log('Error on disconnnect: ', _context2.t0);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 6]]);\n    }));\n\n    return function disconnect() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var values = useMemo(function () {\n    return {\n      isActive: isActive,\n      account: account,\n      isLoading: isLoading,\n      connect: connect,\n      disconnect: disconnect,\n      shouldDisable: shouldDisable\n    };\n  }, [isActive, isLoading, shouldDisable, account]);\n  return React.createElement(MetaMaskContext.Provider, {\n    value: values,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, children);\n};\nexport default function useMetaMask() {\n  var context = React.useContext(MetaMaskContext);\n\n  if (context === undefined) {\n    throw new Error('useMetaMask hook must be used with a MetaMaskProvider component');\n  }\n\n  return context;\n}","map":{"version":3,"sources":["D:\\Programação\\NFTs\\nft-main\\src\\components\\hooks\\metamask.js"],"names":["React","useState","useEffect","useMemo","useCallback","injected","useWeb3React","MetaMaskContext","createContext","MetaMaskProvider","children","activate","account","library","connector","active","deactivate","isActive","setIsActive","shouldDisable","setShouldDisable","isLoading","setIsLoading","connect","then","val","handleIsActive","console","log","disconnect","values","useMetaMask","context","useContext","undefined","Error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react'\r\nimport { injected } from '../wallet/connectors'\r\nimport { useWeb3React } from '../@web3-react/core';\r\n\r\nexport const MetaMaskContext = React.createContext(null)\r\n\r\nexport const MetaMaskProvider = ({ children }) => {\r\n\r\n    const { activate, account, library, connector, active, deactivate } = useWeb3React()\r\n    \r\n    const [isActive, setIsActive] = useState(false)\r\n    const [shouldDisable, setShouldDisable] = useState(false) // Should disable connect button while connecting to MetaMask\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    // Init Loading\r\n    useEffect(() => {\r\n        connect().then(val => {\r\n            setIsLoading(false)\r\n        })\r\n    }, [])\r\n\r\n    // Check when App is Connected or Disconnected to MetaMask\r\n    const handleIsActive = useCallback(() => {\r\n        console.log('App is connected with MetaMask ', active)\r\n        setIsActive(active)\r\n    }, [active])\r\n\r\n    useEffect(() => {\r\n        handleIsActive()\r\n    }, [handleIsActive])\r\n\r\n    // Connect to MetaMask wallet\r\n    const connect = async () => {\r\n        console.log('Connecting to MetaMask...')\r\n        setShouldDisable(true)\r\n        try {\r\n            await activate(injected).then(() => {\r\n                setShouldDisable(false)\r\n            })\r\n        } catch(error) {\r\n            console.log('Error on connecting: ', error)\r\n        }\r\n    }\r\n\r\n    // Disconnect from Metamask wallet\r\n    const disconnect = async () => {\r\n        console.log('Disconnecting wallet from App...')\r\n        try {\r\n            await deactivate()\r\n        } catch(error) {\r\n            console.log('Error on disconnnect: ', error)\r\n        }\r\n    }\r\n\r\n    const values = useMemo(\r\n        () => ({\r\n            isActive,\r\n            account,\r\n            isLoading,\r\n            connect,\r\n            disconnect,\r\n            shouldDisable\r\n        }),\r\n        [isActive, isLoading, shouldDisable, account]\r\n    )\r\n\r\n    return <MetaMaskContext.Provider value={values}>{children}</MetaMaskContext.Provider>\r\n}\r\n\r\nexport default function useMetaMask() {\r\n    const context = React.useContext(MetaMaskContext)\r\n\r\n    if (context === undefined) {\r\n        throw new Error('useMetaMask hook must be used with a MetaMaskProvider component')\r\n    }\r\n\r\n    return context\r\n}"]},"metadata":{},"sourceType":"module"}