{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Programa\\xE7\\xE3o\\\\NFTs\\\\nft-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Programa\\xE7\\xE3o\\\\NFTs\\\\nft-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\Programa\\xE7\\xE3o\\\\NFTs\\\\nft-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"D:\\\\Programa\\xE7\\xE3o\\\\NFTs\\\\nft-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Programa\\xE7\\xE3o\\\\NFTs\\\\nft-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"D:\\\\Programa\\xE7\\xE3o\\\\NFTs\\\\nft-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\Programa\\xE7\\xE3o\\\\NFTs\\\\nft-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Programa\\xE7\\xE3o\\\\NFTs\\\\nft-main\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KriptoBirdz from \"../abis/KryptoBirdz.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchain();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (provider) {\n                  console.log('ethereum wallet is connected');\n                  window.web3 = new Web3(provider);\n                } else {\n                  console.log('no ethereum wallet desconnected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchain\",\n    value: function () {\n      var _loadBlockchain = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkID, networkData, abi, address, contract, totalSupply;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                });\n                console.log(this.state.account);\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkID = _context3.sent;\n                networkData = KriptoBirdz.networks[networkID];\n\n                if (!networkData) {\n                  _context3.next = 22;\n                  break;\n                }\n\n                abi = KriptoBirdz.abi;\n                address = networkData.address;\n                contract = new window.web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                console.log(this.state.contract);\n                _context3.next = 18;\n                return contract.methods.totalSupply().call();\n\n              case 18:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                _context3.next = 23;\n                break;\n\n              case 22:\n                window.alert('smart concract no deploy');\n\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchain() {\n        return _loadBlockchain.apply(this, arguments);\n      }\n\n      return loadBlockchain;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Tokens NFT\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["D:\\Programação\\NFTs\\nft-main\\src\\components\\App.js"],"names":["React","Component","Web3","detectEthereumProvider","KriptoBirdz","App","loadWeb3","loadBlockchain","provider","console","log","window","web3","eth","getAccounts","accounts","setState","account","state","net","getId","networkID","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","alert","props"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;IAEMC,G;;;;;;;;;;;;;;;;uBAEQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,cAAL,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAIiBJ,sBAAsB,E;;;AAAvCK,gBAAAA,Q;;AACN,oBAAGA,QAAH,EAAa;AACTC,kBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAC,kBAAAA,MAAM,CAACC,IAAP,GAAc,IAAIV,IAAJ,CAASM,QAAT,CAAd;AACH,iBAHD,MAIK;AACDC,kBAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIKE,gBAAAA,I,GAAOD,MAAM,CAACC,I;;uBACGA,IAAI,CAACC,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;AACN,qBAAKC,QAAL,CAAc;AAACC,kBAAAA,OAAO,EAACF;AAAT,iBAAd;AACAN,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKQ,KAAL,CAAWD,OAAvB;;uBAEwBL,IAAI,CAACC,GAAL,CAASM,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;AACAC,gBAAAA,W,GAAclB,WAAW,CAACmB,QAAZ,CAAqBF,SAArB,C;;qBAEjBC,W;;;;;AACOE,gBAAAA,G,GAAMpB,WAAW,CAACoB,G;AAClBC,gBAAAA,O,GAAUH,WAAW,CAACG,O;AACtBC,gBAAAA,Q,GAAW,IAAIf,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgBc,QAApB,CAA6BH,GAA7B,EAAkCC,OAAlC,C;AACjB,qBAAKT,QAAL,CAAc;AAACU,kBAAAA,QAAQ,EAARA;AAAD,iBAAd;AACAjB,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKQ,KAAL,CAAWQ,QAAvB;;uBAE0BA,QAAQ,CAACE,OAAT,CAAiBC,WAAjB,GAA+BC,IAA/B,E;;;AAApBD,gBAAAA,W;AACN,qBAAKb,QAAL,CAAc;AAACa,kBAAAA,WAAW,EAAXA;AAAD,iBAAd;;;;;AAGAlB,gBAAAA,MAAM,CAACoB,KAAP,CAAa,0BAAb;;;;;;;;;;;;;;;;;;AAIR,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;AACA,UAAKd,KAAL,GAAa;AACTD,MAAAA,OAAO,EAAE,EADA;AAETS,MAAAA,QAAQ,EAAE,IAFD;AAGTG,MAAAA,WAAW,EAAE;AAHJ,KAAb;AAFe;AAOlB;;;;6BAEQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CADJ;AAKH;;;;EAxDa5B,S;;AA4DlB,eAAeI,GAAf","sourcesContent":["import React, {Component} from \"react\";\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport KriptoBirdz from \"../abis/KryptoBirdz.json\";\r\n\r\nclass App extends Component {\r\n    async componentDidMount() {\r\n        await this.loadWeb3();\r\n        await this.loadBlockchain();\r\n    }\r\n\r\n    async loadWeb3() {\r\n        const provider = await detectEthereumProvider();\r\n        if(provider) {\r\n            console.log('ethereum wallet is connected');\r\n            window.web3 = new Web3(provider);\r\n        } \r\n        else {\r\n            console.log('no ethereum wallet desconnected');\r\n        }\r\n    }\r\n\r\n    async loadBlockchain() {\r\n        const web3 = window.web3;\r\n        const accounts = await web3.eth.getAccounts();\r\n        this.setState({account:accounts});\r\n        console.log(this.state.account);\r\n\r\n        const networkID = await web3.eth.net.getId();\r\n        const networkData = KriptoBirdz.networks[networkID];\r\n        \r\n        if(networkData) {\r\n            const abi = KriptoBirdz.abi;\r\n            const address = networkData.address;\r\n            const contract = new window.web3.eth.Contract(abi, address);\r\n            this.setState({contract})\r\n            console.log(this.state.contract);\r\n\r\n            const totalSupply = await contract.methods.totalSupply().call();\r\n            this.setState({totalSupply})\r\n        } \r\n        else {\r\n            window.alert('smart concract no deploy');\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: '',\r\n            contract: null,\r\n            totalSupply: 0\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Tokens NFT</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}